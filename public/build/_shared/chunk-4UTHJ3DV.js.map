{
  "version": 3,
  "sources": ["../../../app/utils/image.js"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\image.js\"\n);\nimport.meta.hot.lastModified = \"1759533529021.6753\";\n}\n// REMIX HMR END\n\n/**\r\n * Use the browser's image loading to load an image and\r\n * grab the `src` it chooses from a `srcSet`\r\n */\r\nexport async function loadImageFromSrcSet({ src, srcSet, sizes }) {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      if (!src && !srcSet) {\r\n        throw new Error('No image src or srcSet provided');\r\n      }\r\n\r\n      let tempImage = new Image();\r\n\r\n      if (src) {\r\n        tempImage.src = src;\r\n      }\r\n\r\n      if (srcSet) {\r\n        tempImage.srcset = srcSet;\r\n      }\r\n\r\n      if (sizes) {\r\n        tempImage.sizes = sizes;\r\n      }\r\n\r\n      const onLoad = () => {\r\n        tempImage.removeEventListener('load', onLoad);\r\n        const source = tempImage.currentSrc;\r\n        tempImage = null;\r\n        resolve(source);\r\n      };\r\n\r\n      tempImage.addEventListener('load', onLoad);\r\n    } catch (error) {\r\n      reject(`Error loading ${srcSet}: ${error}`);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Generates a transparent png of a given width and height\r\n */\r\nexport async function generateImage(width = 1, height = 1) {\r\n  return new Promise(resolve => {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0)';\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    canvas.toBlob(async blob => {\r\n      if (!blob) throw new Error('Video thumbnail failed to load');\r\n      const image = URL.createObjectURL(blob);\r\n      canvas.remove();\r\n      resolve(image);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Use native html image `srcSet` resolution for non-html images\r\n */\r\nexport async function resolveSrcFromSrcSet({ srcSet, sizes }) {\r\n  const sources = await Promise.all(\r\n    srcSet.split(', ').map(async srcString => {\r\n      const [src, width] = srcString.split(' ');\r\n      const size = Number(width.replace('w', ''));\r\n      const image = await generateImage(size);\r\n      return { src, image, width };\r\n    })\r\n  );\r\n\r\n  const fakeSrcSet = sources.map(({ image, width }) => `${image} ${width}`).join(', ');\r\n  const fakeSrc = await loadImageFromSrcSet({ srcSet: fakeSrcSet, sizes });\r\n\r\n  const output = sources.find(src => src.image === fakeSrc);\r\n  return output.src;\r\n}\r\n"],
  "mappings": ";;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAOA,eAAsB,oBAAoB,EAAE,KAAK,QAAQ,MAAM,GAAG;AAChE,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI;AACF,UAAI,CAAC,OAAO,CAAC,QAAQ;AACnB,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACnD;AAEA,UAAI,YAAY,IAAI,MAAM;AAE1B,UAAI,KAAK;AACP,kBAAU,MAAM;AAAA,MAClB;AAEA,UAAI,QAAQ;AACV,kBAAU,SAAS;AAAA,MACrB;AAEA,UAAI,OAAO;AACT,kBAAU,QAAQ;AAAA,MACpB;AAEA,YAAM,SAAS,MAAM;AACnB,kBAAU,oBAAoB,QAAQ,MAAM;AAC5C,cAAM,SAAS,UAAU;AACzB,oBAAY;AACZ,gBAAQ,MAAM;AAAA,MAChB;AAEA,gBAAU,iBAAiB,QAAQ,MAAM;AAAA,IAC3C,SAAS,OAAP;AACA,aAAO,iBAAiB,WAAW,OAAO;AAAA,IAC5C;AAAA,EACF,CAAC;AACH;AAKA,eAAsB,cAAc,QAAQ,GAAG,SAAS,GAAG;AACzD,SAAO,IAAI,QAAQ,aAAW;AAC5B,UAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,UAAM,MAAM,OAAO,WAAW,IAAI;AAElC,WAAO,QAAQ;AACf,WAAO,SAAS;AAEhB,QAAI,YAAY;AAChB,QAAI,SAAS,GAAG,GAAG,OAAO,MAAM;AAEhC,WAAO,OAAO,OAAM,SAAQ;AAC1B,UAAI,CAAC;AAAM,cAAM,IAAI,MAAM,gCAAgC;AAC3D,YAAM,QAAQ,IAAI,gBAAgB,IAAI;AACtC,aAAO,OAAO;AACd,cAAQ,KAAK;AAAA,IACf,CAAC;AAAA,EACH,CAAC;AACH;AAKA,eAAsB,qBAAqB,EAAE,QAAQ,MAAM,GAAG;AAC5D,QAAM,UAAU,MAAM,QAAQ;AAAA,IAC5B,OAAO,MAAM,IAAI,EAAE,IAAI,OAAM,cAAa;AACxC,YAAM,CAAC,KAAK,KAAK,IAAI,UAAU,MAAM,GAAG;AACxC,YAAM,OAAO,OAAO,MAAM,QAAQ,KAAK,EAAE,CAAC;AAC1C,YAAM,QAAQ,MAAM,cAAc,IAAI;AACtC,aAAO,EAAE,KAAK,OAAO,MAAM;AAAA,IAC7B,CAAC;AAAA,EACH;AAEA,QAAM,aAAa,QAAQ,IAAI,CAAC,EAAE,OAAO,MAAM,MAAM,GAAG,SAAS,OAAO,EAAE,KAAK,IAAI;AACnF,QAAM,UAAU,MAAM,oBAAoB,EAAE,QAAQ,YAAY,MAAM,CAAC;AAEvE,QAAM,SAAS,QAAQ,KAAK,SAAO,IAAI,UAAU,OAAO;AACxD,SAAO,OAAO;AAChB;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../app/components/model/model.jsx", "../../../app/components/model/model.module.css", "../../../app/components/model/index.js"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\model\\\\\\\\model.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\model\\\\model.jsx\");\n}\n// REMIX HMR END\n\nimport { animate, useReducedMotion, useSpring } from 'framer-motion';\nimport { useInViewport } from '~/hooks';\nimport { createRef, startTransition, useCallback, useEffect, useRef, useState } from 'react';\nimport { AmbientLight, Color, DirectionalLight, Group, MathUtils, Mesh, MeshBasicMaterial, MeshDepthMaterial, OrthographicCamera, PerspectiveCamera, PlaneGeometry, SRGBColorSpace, Scene, ShaderMaterial, Vector3, WebGLRenderTarget, WebGLRenderer } from 'three';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nimport { resolveSrcFromSrcSet } from '~/utils/image';\nimport { classes, cssProps, numToMs } from '~/utils/style';\nimport { cleanRenderer, cleanScene, modelLoader, removeLights, textureLoader } from '~/utils/three';\nimport { ModelAnimationType } from './device-models';\nimport { throttle } from '~/utils/throttle';\nimport styles from './model.module.css';\nconst MeshType = {\n  Frame: 'Frame',\n  Logo: 'Logo',\n  Screen: 'Screen'\n};\nconst rotationSpringConfig = {\n  stiffness: 40,\n  damping: 20,\n  mass: 1.4,\n  restSpeed: 0.001\n};\nexport const Model = ({\n  models,\n  show = true,\n  showDelay = 0,\n  cameraPosition = {\n    x: 0,\n    y: 0,\n    z: 8\n  },\n  style,\n  className,\n  onLoad,\n  alt,\n  ...rest\n}) => {\n  _s();\n  const [loaded, setLoaded] = useState(false);\n  const container = useRef();\n  const canvas = useRef();\n  const camera = useRef();\n  const modelGroup = useRef();\n  const scene = useRef();\n  const renderer = useRef();\n  const shadowGroup = useRef();\n  const renderTarget = useRef();\n  const renderTargetBlur = useRef();\n  const shadowCamera = useRef();\n  const depthMaterial = useRef();\n  const horizontalBlurMaterial = useRef();\n  const verticalBlurMaterial = useRef();\n  const plane = useRef();\n  const lights = useRef();\n  const blurPlane = useRef();\n  const fillPlane = useRef();\n  const isInViewport = useInViewport(container, false, {\n    threshold: 0.2\n  });\n  const reduceMotion = useReducedMotion();\n  const rotationX = useSpring(0, rotationSpringConfig);\n  const rotationY = useSpring(0, rotationSpringConfig);\n  useEffect(() => {\n    const {\n      clientWidth,\n      clientHeight\n    } = container.current;\n    renderer.current = new WebGLRenderer({\n      canvas: canvas.current,\n      alpha: true,\n      antialias: false,\n      powerPreference: 'high-performance',\n      failIfMajorPerformanceCaveat: true\n    });\n    renderer.current.setPixelRatio(2);\n    renderer.current.setSize(clientWidth, clientHeight);\n    renderer.current.outputColorSpace = SRGBColorSpace;\n    camera.current = new PerspectiveCamera(36, clientWidth / clientHeight, 0.1, 100);\n    camera.current.position.set(cameraPosition.x, cameraPosition.y, cameraPosition.z);\n    scene.current = new Scene();\n    modelGroup.current = new Group();\n    scene.current.add(modelGroup.current);\n\n    // Lighting\n    const ambientLight = new AmbientLight(0xffffff, 1.2);\n    const keyLight = new DirectionalLight(0xffffff, 1.1);\n    const fillLight = new DirectionalLight(0xffffff, 0.8);\n    fillLight.position.set(-6, 2, 2);\n    keyLight.position.set(0.5, 0, 0.866);\n    lights.current = [ambientLight, keyLight, fillLight];\n    lights.current.forEach(light => scene.current.add(light));\n\n    // The shadow container, if you need to move the plane just move this\n    shadowGroup.current = new Group();\n    scene.current.add(shadowGroup.current);\n    shadowGroup.current.position.set(0, 0, -0.8);\n    shadowGroup.current.rotateX(Math.PI / 2);\n    const renderTargetSize = 512;\n    const planeWidth = 8;\n    const planeHeight = 8;\n    const cameraHeight = 1.5;\n    const shadowOpacity = 0.8;\n    const shadowDarkness = 3;\n\n    // The render target that will show the shadows in the plane texture\n    renderTarget.current = new WebGLRenderTarget(renderTargetSize, renderTargetSize);\n    renderTarget.current.texture.generateMipmaps = false;\n\n    // The render target that we will use to blur the first render target\n    renderTargetBlur.current = new WebGLRenderTarget(renderTargetSize, renderTargetSize);\n    renderTargetBlur.current.texture.generateMipmaps = false;\n\n    // Make a plane and make it face up\n    const planeGeometry = new PlaneGeometry(planeWidth, planeHeight).rotateX(Math.PI / 2);\n    const planeMaterial = new MeshBasicMaterial({\n      map: renderTarget.current.texture,\n      opacity: shadowOpacity,\n      transparent: true\n    });\n    plane.current = new Mesh(planeGeometry, planeMaterial);\n    // The y from the texture is flipped!\n    plane.current.scale.y = -1;\n    shadowGroup.current.add(plane.current);\n\n    // The plane onto which to blur the texture\n    blurPlane.current = new Mesh(planeGeometry);\n    blurPlane.current.visible = false;\n    shadowGroup.current.add(blurPlane.current);\n\n    // The plane with the color of the ground\n    const fillMaterial = new MeshBasicMaterial({\n      color: 0xffffff,\n      opacity: 0,\n      transparent: true\n    });\n    fillPlane.current = new Mesh(planeGeometry, fillMaterial);\n    fillPlane.current.rotateX(Math.PI);\n    fillPlane.current.position.y -= 0.00001;\n    shadowGroup.current.add(fillPlane.current);\n\n    // The camera to render the depth material from\n    shadowCamera.current = new OrthographicCamera(-planeWidth / 2, planeWidth / 2, planeHeight / 2, -planeHeight / 2, 0, cameraHeight);\n    // Get the camera to look up\n    shadowCamera.current.rotation.x = Math.PI / 2;\n    shadowGroup.current.add(shadowCamera.current);\n\n    // Like MeshDepthMaterial, but goes from black to transparent\n    depthMaterial.current = new MeshDepthMaterial();\n    depthMaterial.current.userData.darkness = {\n      value: shadowDarkness\n    };\n    depthMaterial.current.onBeforeCompile = shader => {\n      shader.uniforms.darkness = depthMaterial.current.userData.darkness;\n      shader.fragmentShader = `\n        uniform float darkness;\n        ${shader.fragmentShader.replace('gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'gl_FragColor = vec4( vec3( 0.0 ), ( 1.0 - fragCoordZ ) * darkness );')}\n      `;\n    };\n    depthMaterial.current.depthTest = false;\n    depthMaterial.current.depthWrite = false;\n    horizontalBlurMaterial.current = new ShaderMaterial(HorizontalBlurShader);\n    horizontalBlurMaterial.current.depthTest = false;\n    verticalBlurMaterial.current = new ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.current.depthTest = false;\n    const unsubscribeX = rotationX.on('change', renderFrame);\n    const unsubscribeY = rotationY.on('change', renderFrame);\n    return () => {\n      renderTarget.current.dispose();\n      renderTargetBlur.current.dispose();\n      removeLights(lights.current);\n      cleanScene(scene.current);\n      cleanRenderer(renderer.current);\n      unsubscribeX();\n      unsubscribeY();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const blurShadow = useCallback(amount => {\n    blurPlane.current.visible = true;\n\n    // Blur horizontally and draw in the renderTargetBlur\n    blurPlane.current.material = horizontalBlurMaterial.current;\n    blurPlane.current.material.uniforms.tDiffuse.value = renderTarget.current.texture;\n    horizontalBlurMaterial.current.uniforms.h.value = amount * (1 / 256);\n    renderer.current.setRenderTarget(renderTargetBlur.current);\n    renderer.current.render(blurPlane.current, shadowCamera.current);\n\n    // Blur vertically and draw in the main renderTarget\n    blurPlane.current.material = verticalBlurMaterial.current;\n    blurPlane.current.material.uniforms.tDiffuse.value = renderTargetBlur.current.texture;\n    verticalBlurMaterial.current.uniforms.v.value = amount * (1 / 256);\n    renderer.current.setRenderTarget(renderTarget.current);\n    renderer.current.render(blurPlane.current, shadowCamera.current);\n    blurPlane.current.visible = false;\n  }, []);\n\n  // Handle render passes for a single frame\n  const renderFrame = useCallback(() => {\n    const blurAmount = 5;\n\n    // Remove the background\n    const initialBackground = scene.current.background;\n    scene.current.background = null;\n\n    // Force the depthMaterial to everything\n    // cameraHelper.visible = false;\n    scene.current.overrideMaterial = depthMaterial.current;\n\n    // Render to the render target to get the depths\n    renderer.current.setRenderTarget(renderTarget.current);\n    renderer.current.render(scene.current, shadowCamera.current);\n\n    // And reset the override material\n    scene.current.overrideMaterial = null;\n    blurShadow(blurAmount);\n\n    // A second pass to reduce the artifacts\n    // (0.4 is the minimum blur amout so that the artifacts are gone)\n    blurShadow(blurAmount * 0.4);\n\n    // Reset and render the normal scene\n    renderer.current.setRenderTarget(null);\n    scene.current.background = initialBackground;\n    modelGroup.current.rotation.x = rotationX.get();\n    modelGroup.current.rotation.y = rotationY.get();\n    renderer.current.render(scene.current, camera.current);\n  }, [blurShadow, rotationX, rotationY]);\n\n  // Handle mouse move animation\n  useEffect(() => {\n    const onMouseMove = throttle(event => {\n      const {\n        innerWidth,\n        innerHeight\n      } = window;\n      const position = {\n        x: (event.clientX - innerWidth / 2) / innerWidth,\n        y: (event.clientY - innerHeight / 2) / innerHeight\n      };\n      rotationY.set(position.x / 2);\n      rotationX.set(position.y / 2);\n    }, 100);\n    if (isInViewport && !reduceMotion) {\n      window.addEventListener('mousemove', onMouseMove);\n    }\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n    };\n  }, [isInViewport, reduceMotion, rotationX, rotationY]);\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      if (!container.current) return;\n      const {\n        clientWidth,\n        clientHeight\n      } = container.current;\n      renderer.current.setSize(clientWidth, clientHeight);\n      camera.current.aspect = clientWidth / clientHeight;\n      camera.current.updateProjectionMatrix();\n      renderFrame();\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [renderFrame]);\n  return <div className={classes(styles.model, className)} data-loaded={loaded} style={cssProps({\n    delay: numToMs(showDelay)\n  }, style)} ref={container} role=\"img\" aria-label={alt} {...rest}>\n      \r\n      <canvas className={styles.canvas} ref={canvas} />\r\n      {models.map((model, index) => <Device key={JSON.stringify(model.position)} renderer={renderer} modelGroup={modelGroup} show={show} showDelay={showDelay} renderFrame={renderFrame} index={index} setLoaded={setLoaded} onLoad={onLoad} model={model} />)}\r\n    </div>;\n};\n_s(Model, \"B3XkTTt5rCLz8807Y9SGdicChk0=\", false, function () {\n  return [useInViewport, useReducedMotion, useSpring, useSpring];\n});\n_c = Model;\nconst Device = ({\n  renderer,\n  model,\n  modelGroup,\n  renderFrame,\n  index,\n  showDelay,\n  setLoaded,\n  onLoad,\n  show\n}) => {\n  _s2();\n  const [loadDevice, setLoadDevice] = useState();\n  const reduceMotion = useReducedMotion();\n  const placeholderScreen = createRef();\n  useEffect(() => {\n    const applyScreenTexture = async (texture, node) => {\n      texture.colorSpace = SRGBColorSpace;\n      texture.flipY = false;\n      texture.anisotropy = renderer.current.capabilities.getMaxAnisotropy();\n      texture.generateMipmaps = false;\n\n      // Decode the texture to prevent jank on first render\n      await renderer.current.initTexture(texture);\n      node.material.color = new Color(0xffffff);\n      node.material.transparent = true;\n      node.material.map = texture;\n    };\n\n    // Generate promises to await when ready\n    const load = async () => {\n      const {\n        texture,\n        position,\n        url\n      } = model;\n      let loadFullResTexture;\n      let playAnimation;\n      const [placeholder, gltf] = await Promise.all([await textureLoader.loadAsync(texture.placeholder), await modelLoader.loadAsync(url)]);\n      modelGroup.current.add(gltf.scene);\n      gltf.scene.traverse(async node => {\n        if (node.material) {\n          node.material.color = new Color(0x1f2025);\n        }\n        if (node.name === MeshType.Screen) {\n          // Create a copy of the screen mesh so we can fade it out\n          // over the full resolution screen texture\n          placeholderScreen.current = node.clone();\n          placeholderScreen.current.material = node.material.clone();\n          node.parent.add(placeholderScreen.current);\n          placeholderScreen.current.material.opacity = 1;\n          placeholderScreen.current.position.z += 0.001;\n          applyScreenTexture(placeholder, placeholderScreen.current);\n          loadFullResTexture = async () => {\n            const image = await resolveSrcFromSrcSet(texture);\n            const fullSize = await textureLoader.loadAsync(image);\n            await applyScreenTexture(fullSize, node);\n            animate(1, 0, {\n              onUpdate: value => {\n                placeholderScreen.current.material.opacity = value;\n                renderFrame();\n              }\n            });\n          };\n        }\n      });\n      const targetPosition = new Vector3(position.x, position.y, position.z);\n      if (reduceMotion) {\n        gltf.scene.position.set(...targetPosition.toArray());\n      }\n\n      // Simple slide up animation\n      if (model.animation === ModelAnimationType.SpringUp) {\n        playAnimation = () => {\n          const startPosition = new Vector3(targetPosition.x, targetPosition.y - 1, targetPosition.z);\n          gltf.scene.position.set(...startPosition.toArray());\n          animate(startPosition.y, targetPosition.y, {\n            type: 'spring',\n            delay: (300 * index + showDelay) / 1000,\n            stiffness: 60,\n            damping: 20,\n            mass: 1,\n            restSpeed: 0.0001,\n            restDelta: 0.0001,\n            onUpdate: value => {\n              gltf.scene.position.y = value;\n              renderFrame();\n            }\n          });\n        };\n      }\n\n      // Swing the laptop lid open\n      if (model.animation === ModelAnimationType.LaptopOpen) {\n        playAnimation = () => {\n          const frameNode = gltf.scene.children.find(node => node.name === MeshType.Frame);\n          const startRotation = new Vector3(MathUtils.degToRad(90), 0, 0);\n          const endRotation = new Vector3(0, 0, 0);\n          gltf.scene.position.set(...targetPosition.toArray());\n          frameNode.rotation.set(...startRotation.toArray());\n          return animate(startRotation.x, endRotation.x, {\n            type: 'spring',\n            delay: (300 * index + showDelay + 300) / 1000,\n            stiffness: 80,\n            damping: 20,\n            restSpeed: 0.0001,\n            restDelta: 0.0001,\n            onUpdate: value => {\n              frameNode.rotation.x = value;\n              renderFrame();\n            }\n          });\n        };\n      }\n      return {\n        loadFullResTexture,\n        playAnimation\n      };\n    };\n    setLoadDevice({\n      start: load\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (!loadDevice || !show) return;\n    let animation;\n    const onModelLoad = async () => {\n      const {\n        loadFullResTexture,\n        playAnimation\n      } = await loadDevice.start();\n      setLoaded(true);\n      onLoad?.();\n      if (!reduceMotion) {\n        animation = playAnimation();\n      }\n      await loadFullResTexture();\n      if (reduceMotion) {\n        renderFrame();\n      }\n    };\n    startTransition(() => {\n      onModelLoad();\n    });\n    return () => {\n      animation?.stop();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadDevice, show]);\n};\n_s2(Device, \"GLCd2e6s5fVivvxZ6Z+Ka4Xvmmo=\", false, function () {\n  return [useReducedMotion];\n});\n_c2 = Device;\nexport default Model;\nvar _c, _c2;\n$RefreshReg$(_c, \"Model\");\n$RefreshReg$(_c2, \"Device\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export default {\"model\":\"model-module__model__qMqUg\",\"canvas\":\"model-module__canvas__iryn2\"};", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\components\\\\model\\\\index.js\"\n);\nimport.meta.hot.lastModified = \"1759533528975.7024\";\n}\n// REMIX HMR END\n\nexport { Model } from './model';\r\n"],
  "mappings": "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",
  "names": []
}

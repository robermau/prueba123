{
  "version": 3,
  "sources": ["../../../app/hooks/useInViewport.js"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\hooks\\\\useInViewport.js\"\n);\nimport.meta.hot.lastModified = \"1759533528992.341\";\n}\n// REMIX HMR END\n\nimport { useEffect, useState } from 'react';\r\n\r\nexport function useInViewport(\r\n  elementRef,\r\n  unobserveOnIntersect,\r\n  options = {},\r\n  shouldObserve = true\r\n) {\r\n  const [intersect, setIntersect] = useState(false);\r\n  const [isUnobserved, setIsUnobserved] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!elementRef?.current) return;\r\n\r\n    const observer = new IntersectionObserver(([entry]) => {\r\n      const { isIntersecting, target } = entry;\r\n\r\n      setIntersect(isIntersecting);\r\n\r\n      if (isIntersecting && unobserveOnIntersect) {\r\n        observer.unobserve(target);\r\n        setIsUnobserved(true);\r\n      }\r\n    }, options);\r\n\r\n    if (!isUnobserved && shouldObserve) {\r\n      observer.observe(elementRef.current);\r\n    }\r\n\r\n    return () => observer.disconnect();\r\n  }, [elementRef, unobserveOnIntersect, options, isUnobserved, shouldObserve]);\r\n\r\n  return intersect;\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;AAWA,mBAAoC;AATpC,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAKO,SAAS,cACd,YACA,sBACA,UAAU,CAAC,GACX,gBAAgB,MAChB;AACA,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAS,KAAK;AAChD,QAAM,CAAC,cAAc,eAAe,QAAI,uBAAS,KAAK;AAEtD,8BAAU,MAAM;AACd,QAAI,CAAC,YAAY;AAAS;AAE1B,UAAM,WAAW,IAAI,qBAAqB,CAAC,CAAC,KAAK,MAAM;AACrD,YAAM,EAAE,gBAAgB,OAAO,IAAI;AAEnC,mBAAa,cAAc;AAE3B,UAAI,kBAAkB,sBAAsB;AAC1C,iBAAS,UAAU,MAAM;AACzB,wBAAgB,IAAI;AAAA,MACtB;AAAA,IACF,GAAG,OAAO;AAEV,QAAI,CAAC,gBAAgB,eAAe;AAClC,eAAS,QAAQ,WAAW,OAAO;AAAA,IACrC;AAEA,WAAO,MAAM,SAAS,WAAW;AAAA,EACnC,GAAG,CAAC,YAAY,sBAAsB,SAAS,cAAc,aAAa,CAAC;AAE3E,SAAO;AACT;",
  "names": []
}
